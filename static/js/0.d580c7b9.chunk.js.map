{"version":3,"sources":["../node_modules/@babel/runtime/helpers/objectWithoutProperties.js","../node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js","../node_modules/reselect/es/index.js","../node_modules/@material-ui/core/esm/Grid/Grid.js","../node_modules/@material-ui/core/esm/Card/Card.js","../node_modules/react-i18next/dist/es/withTranslation.js","../../../src/lang/en_US.ts","../../../src/lang/zh_CN.ts","../../src/register.ts","../../../src/utils/date.ts","../../src/format.ts","../../src/index.ts","../node_modules/bignumber.js/bignumber.js"],"names":["objectWithoutPropertiesLoose","module","exports","source","excluded","key","i","target","Object","getOwnPropertySymbols","sourceSymbolKeys","length","indexOf","prototype","propertyIsEnumerable","call","sourceKeys","keys","defaultEqualityCheck","a","b","areArgumentsShallowlyEqual","equalityCheck","prev","next","getDependencies","funcs","dependencies","Array","isArray","every","dep","dependencyTypes","map","join","Error","createSelector","memoize","_len","arguments","memoizeOptions","_key","_len2","_key2","recomputations","resultFunc","pop","memoizedResultFunc","apply","undefined","concat","selector","params","push","resetRecomputations","createSelectorCreator","func","lastArgs","lastResult","SPACINGS","GRID_SIZES","getOffset","val","div","parse","parseFloat","String","replace","Grid","React","props","ref","_props$alignContent","alignContent","_props$alignItems","alignItems","classes","classNameProp","className","_props$component","component","Component","_props$container","container","_props$direction","direction","_props$item","item","_props$justify","justify","_props$lg","lg","_props$md","md","_props$sm","sm","_props$spacing","spacing","_props$wrap","wrap","_props$xl","xl","_props$xs","xs","_props$zeroMinWidth","zeroMinWidth","other","_objectWithoutProperties","clsx","root","_extends","StyledGrid","withStyles","theme","boxSizing","display","flexWrap","width","margin","minWidth","flexDirection","justifyContent","breakpoint","styles","forEach","themeSpacing","padding","generateGutter","breakpoints","reduce","accumulator","globalStyles","size","Math","round","flexBasis","flexGrow","maxWidth","up","generateGrid","name","Card","_props$raised","raised","Paper","elevation","overflow","ownKeys","object","enumerableOnly","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","_objectSpread","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","withTranslation","ns","options","WrappedComponent","I18nextWithTranslation","_ref","forwardedRef","rest","_useTranslation","useTranslation","_useTranslation2","_slicedToArray","t","i18n","ready","passDownProps","tReady","withRef","createElement","displayName","getDisplayName","forwardRef","assign","locale","diff","unit","ZH_CN","idx","globalObject","BigNumber","isNumeric","mathceil","ceil","mathfloor","floor","bignumberError","tooManyDigits","BASE","LOG_BASE","MAX_SAFE_INTEGER","POWS_TEN","SQRT_BASE","MAX","bitFloor","n","coeffToString","s","z","j","r","charCodeAt","slice","compare","x","y","xc","c","yc","k","e","l","intCheck","min","max","isOdd","toExponential","str","charAt","toFixedPoint","len","zs","clone","configObject","convertBase","parseNumeric","P","constructor","toString","valueOf","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","prefix","groupSize","secondaryGroupSize","groupSeparator","decimalSeparator","fractionGroupSize","fractionGroupSeparator","suffix","ALPHABET","v","alphabet","caseChanged","isNum","this","_isBigNumber","test","search","substring","DEBUG","toUpperCase","toLowerCase","format","rm","id","c0","ne","maxOrMin","args","method","m","normalise","sd","d","ni","rd","pows10","out","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","config","set","obj","p","hasOwnProperty","crypto","getRandomValues","randomBytes","EXPONENTIAL_AT","RANGE","isBigNumber","maximum","lt","minimum","gt","random","pow2_53","random53bitInt","dp","rand","Uint32Array","copy","splice","sum","plus","decimal","toBaseOut","baseIn","baseOut","arrL","arr","reverse","sign","callerIsToString","pow","multiply","base","temp","xlo","xhi","carry","klo","khi","aL","bL","cmp","subtract","more","prod","prodL","q","qc","rem","remL","rem0","xi","xL","yc0","yL","yz","NaN","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","isNaN","p1","p2","absoluteValue","abs","comparedTo","decimalPlaces","dividedBy","dividedToIntegerBy","idiv","exponentiatedBy","half","isModExp","nIsBig","nIsNeg","nIsOdd","isInteger","mod","times","integerValue","isEqualTo","eq","isFinite","isGreaterThan","isGreaterThanOrEqualTo","gte","isLessThan","isLessThanOrEqualTo","lte","isNegative","isPositive","isZero","minus","xLTy","xe","ye","modulo","multipliedBy","xcL","ycL","ylo","yhi","zc","sqrtBase","negated","precision","shiftedBy","squareRoot","sqrt","rep","toFixed","toFormat","split","g1","g2","intPart","fractionPart","isNeg","intDigits","substr","RegExp","toFraction","d0","d1","d2","exp","n0","n1","toNumber","toPrecision","toJSON","define"],"mappings":"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","file":"static/js/0.d580c7b9.chunk.js","sourcesContent":["var objectWithoutPropertiesLoose = require(\"./objectWithoutPropertiesLoose\");\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nmodule.exports = _objectWithoutProperties;","function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nmodule.exports = _objectWithoutPropertiesLoose;","function defaultEqualityCheck(a, b) {\n  return a === b;\n}\n\nfunction areArgumentsShallowlyEqual(equalityCheck, prev, next) {\n  if (prev === null || next === null || prev.length !== next.length) {\n    return false;\n  }\n\n  // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n  var length = prev.length;\n  for (var i = 0; i < length; i++) {\n    if (!equalityCheck(prev[i], next[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport function defaultMemoize(func) {\n  var equalityCheck = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultEqualityCheck;\n\n  var lastArgs = null;\n  var lastResult = null;\n  // we reference arguments instead of spreading them for performance reasons\n  return function () {\n    if (!areArgumentsShallowlyEqual(equalityCheck, lastArgs, arguments)) {\n      // apply arguments instead of spreading for performance.\n      lastResult = func.apply(null, arguments);\n    }\n\n    lastArgs = arguments;\n    return lastResult;\n  };\n}\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep;\n    }).join(', ');\n    throw new Error('Selector creators expect all input-selectors to be functions, ' + ('instead received the following types: [' + dependencyTypes + ']'));\n  }\n\n  return dependencies;\n}\n\nexport function createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptions = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptions[_key - 1] = arguments[_key];\n  }\n\n  return function () {\n    for (var _len2 = arguments.length, funcs = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var recomputations = 0;\n    var resultFunc = funcs.pop();\n    var dependencies = getDependencies(funcs);\n\n    var memoizedResultFunc = memoize.apply(undefined, [function () {\n      recomputations++;\n      // apply arguments instead of spreading for performance.\n      return resultFunc.apply(null, arguments);\n    }].concat(memoizeOptions));\n\n    // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n    var selector = memoize(function () {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        params.push(dependencies[i].apply(null, arguments));\n      }\n\n      // apply arguments instead of spreading for performance.\n      return memoizedResultFunc.apply(null, params);\n    });\n\n    selector.resultFunc = resultFunc;\n    selector.dependencies = dependencies;\n    selector.recomputations = function () {\n      return recomputations;\n    };\n    selector.resetRecomputations = function () {\n      return recomputations = 0;\n    };\n    return selector;\n  };\n}\n\nexport var createSelector = createSelectorCreator(defaultMemoize);\n\nexport function createStructuredSelector(selectors) {\n  var selectorCreator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : createSelector;\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + ('where each property is a selector, instead received a ' + typeof selectors));\n  }\n  var objectKeys = Object.keys(selectors);\n  return selectorCreator(objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n}","import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\n// A grid component using the following libs as inspiration.\n//\n// For the implementation:\n// - https://getbootstrap.com/docs/4.3/layout/grid/\n// - https://github.com/kristoferjoseph/flexboxgrid/blob/master/src/css/flexboxgrid.css\n// - https://github.com/roylee0704/react-flexbox-grid\n// - https://material.angularjs.org/latest/layout/introduction\n//\n// Follow this flexbox Guide to better understand the underlying model:\n// - https://css-tricks.com/snippets/css/a-guide-to-flexbox/\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport requirePropFactory from '../utils/requirePropFactory';\nvar SPACINGS = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar GRID_SIZES = ['auto', true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\n\nfunction generateGrid(globalStyles, theme, breakpoint) {\n  var styles = {};\n  GRID_SIZES.forEach(function (size) {\n    var key = \"grid-\".concat(breakpoint, \"-\").concat(size);\n\n    if (size === true) {\n      // For the auto layouting\n      styles[key] = {\n        flexBasis: 0,\n        flexGrow: 1,\n        maxWidth: '100%'\n      };\n      return;\n    }\n\n    if (size === 'auto') {\n      styles[key] = {\n        flexBasis: 'auto',\n        flexGrow: 0,\n        maxWidth: 'none'\n      };\n      return;\n    } // Keep 7 significant numbers.\n\n\n    var width = \"\".concat(Math.round(size / 12 * 10e7) / 10e5, \"%\"); // Close to the bootstrap implementation:\n    // https://github.com/twbs/bootstrap/blob/8fccaa2439e97ec72a4b7dc42ccc1f649790adb0/scss/mixins/_grid.scss#L41\n\n    styles[key] = {\n      flexBasis: width,\n      flexGrow: 0,\n      maxWidth: width\n    };\n  }); // No need for a media query for the first size.\n\n  if (breakpoint === 'xs') {\n    _extends(globalStyles, styles);\n  } else {\n    globalStyles[theme.breakpoints.up(breakpoint)] = styles;\n  }\n}\n\nfunction getOffset(val) {\n  var div = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  var parse = parseFloat(val);\n  return \"\".concat(parse / div).concat(String(val).replace(String(parse), '') || 'px');\n}\n\nfunction generateGutter(theme, breakpoint) {\n  var styles = {};\n  SPACINGS.forEach(function (spacing) {\n    var themeSpacing = theme.spacing(spacing);\n\n    if (themeSpacing === 0) {\n      return;\n    }\n\n    styles[\"spacing-\".concat(breakpoint, \"-\").concat(spacing)] = {\n      margin: \"-\".concat(getOffset(themeSpacing, 2)),\n      width: \"calc(100% + \".concat(getOffset(themeSpacing), \")\"),\n      '& > $item': {\n        padding: getOffset(themeSpacing, 2)\n      }\n    };\n  });\n  return styles;\n} // Default CSS values\n// flex: '0 1 auto',\n// flexDirection: 'row',\n// alignItems: 'flex-start',\n// flexWrap: 'nowrap',\n// justifyContent: 'flex-start',\n\n\nexport var styles = function styles(theme) {\n  return _extends({\n    /* Styles applied to the root element. */\n    root: {},\n\n    /* Styles applied to the root element if `container={true}`. */\n    container: {\n      boxSizing: 'border-box',\n      display: 'flex',\n      flexWrap: 'wrap',\n      width: '100%'\n    },\n\n    /* Styles applied to the root element if `item={true}`. */\n    item: {\n      boxSizing: 'border-box',\n      margin: '0' // For instance, it's useful when used with a `figure` element.\n\n    },\n\n    /* Styles applied to the root element if `zeroMinWidth={true}`. */\n    zeroMinWidth: {\n      minWidth: 0\n    },\n\n    /* Styles applied to the root element if `direction=\"column\"`. */\n    'direction-xs-column': {\n      flexDirection: 'column'\n    },\n\n    /* Styles applied to the root element if `direction=\"column-reverse\"`. */\n    'direction-xs-column-reverse': {\n      flexDirection: 'column-reverse'\n    },\n\n    /* Styles applied to the root element if `direction=\"row-reverse\"`. */\n    'direction-xs-row-reverse': {\n      flexDirection: 'row-reverse'\n    },\n\n    /* Styles applied to the root element if `wrap=\"nowrap\"`. */\n    'wrap-xs-nowrap': {\n      flexWrap: 'nowrap'\n    },\n\n    /* Styles applied to the root element if `wrap=\"reverse\"`. */\n    'wrap-xs-wrap-reverse': {\n      flexWrap: 'wrap-reverse'\n    },\n\n    /* Styles applied to the root element if `alignItems=\"center\"`. */\n    'align-items-xs-center': {\n      alignItems: 'center'\n    },\n\n    /* Styles applied to the root element if `alignItems=\"flex-start\"`. */\n    'align-items-xs-flex-start': {\n      alignItems: 'flex-start'\n    },\n\n    /* Styles applied to the root element if `alignItems=\"flex-end\"`. */\n    'align-items-xs-flex-end': {\n      alignItems: 'flex-end'\n    },\n\n    /* Styles applied to the root element if `alignItems=\"baseline\"`. */\n    'align-items-xs-baseline': {\n      alignItems: 'baseline'\n    },\n\n    /* Styles applied to the root element if `alignContent=\"center\"`. */\n    'align-content-xs-center': {\n      alignContent: 'center'\n    },\n\n    /* Styles applied to the root element if `alignContent=\"flex-start\"`. */\n    'align-content-xs-flex-start': {\n      alignContent: 'flex-start'\n    },\n\n    /* Styles applied to the root element if `alignContent=\"flex-end\"`. */\n    'align-content-xs-flex-end': {\n      alignContent: 'flex-end'\n    },\n\n    /* Styles applied to the root element if `alignContent=\"space-between\"`. */\n    'align-content-xs-space-between': {\n      alignContent: 'space-between'\n    },\n\n    /* Styles applied to the root element if `alignContent=\"space-around\"`. */\n    'align-content-xs-space-around': {\n      alignContent: 'space-around'\n    },\n\n    /* Styles applied to the root element if `justify=\"center\"`. */\n    'justify-xs-center': {\n      justifyContent: 'center'\n    },\n\n    /* Styles applied to the root element if `justify=\"flex-end\"`. */\n    'justify-xs-flex-end': {\n      justifyContent: 'flex-end'\n    },\n\n    /* Styles applied to the root element if `justify=\"space-between\"`. */\n    'justify-xs-space-between': {\n      justifyContent: 'space-between'\n    },\n\n    /* Styles applied to the root element if `justify=\"space-around\"`. */\n    'justify-xs-space-around': {\n      justifyContent: 'space-around'\n    },\n\n    /* Styles applied to the root element if `justify=\"space-evenly\"`. */\n    'justify-xs-space-evenly': {\n      justifyContent: 'space-evenly'\n    }\n  }, generateGutter(theme, 'xs'), theme.breakpoints.keys.reduce(function (accumulator, key) {\n    // Use side effect over immutability for better performance.\n    generateGrid(accumulator, theme, key);\n    return accumulator;\n  }, {}));\n};\nvar Grid = /*#__PURE__*/React.forwardRef(function Grid(props, ref) {\n  var _props$alignContent = props.alignContent,\n      alignContent = _props$alignContent === void 0 ? 'stretch' : _props$alignContent,\n      _props$alignItems = props.alignItems,\n      alignItems = _props$alignItems === void 0 ? 'stretch' : _props$alignItems,\n      classes = props.classes,\n      classNameProp = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      _props$container = props.container,\n      container = _props$container === void 0 ? false : _props$container,\n      _props$direction = props.direction,\n      direction = _props$direction === void 0 ? 'row' : _props$direction,\n      _props$item = props.item,\n      item = _props$item === void 0 ? false : _props$item,\n      _props$justify = props.justify,\n      justify = _props$justify === void 0 ? 'flex-start' : _props$justify,\n      _props$lg = props.lg,\n      lg = _props$lg === void 0 ? false : _props$lg,\n      _props$md = props.md,\n      md = _props$md === void 0 ? false : _props$md,\n      _props$sm = props.sm,\n      sm = _props$sm === void 0 ? false : _props$sm,\n      _props$spacing = props.spacing,\n      spacing = _props$spacing === void 0 ? 0 : _props$spacing,\n      _props$wrap = props.wrap,\n      wrap = _props$wrap === void 0 ? 'wrap' : _props$wrap,\n      _props$xl = props.xl,\n      xl = _props$xl === void 0 ? false : _props$xl,\n      _props$xs = props.xs,\n      xs = _props$xs === void 0 ? false : _props$xs,\n      _props$zeroMinWidth = props.zeroMinWidth,\n      zeroMinWidth = _props$zeroMinWidth === void 0 ? false : _props$zeroMinWidth,\n      other = _objectWithoutProperties(props, [\"alignContent\", \"alignItems\", \"classes\", \"className\", \"component\", \"container\", \"direction\", \"item\", \"justify\", \"lg\", \"md\", \"sm\", \"spacing\", \"wrap\", \"xl\", \"xs\", \"zeroMinWidth\"]);\n\n  var className = clsx(classes.root, classNameProp, container && [classes.container, spacing !== 0 && classes[\"spacing-xs-\".concat(String(spacing))]], item && classes.item, zeroMinWidth && classes.zeroMinWidth, direction !== 'row' && classes[\"direction-xs-\".concat(String(direction))], wrap !== 'wrap' && classes[\"wrap-xs-\".concat(String(wrap))], alignItems !== 'stretch' && classes[\"align-items-xs-\".concat(String(alignItems))], alignContent !== 'stretch' && classes[\"align-content-xs-\".concat(String(alignContent))], justify !== 'flex-start' && classes[\"justify-xs-\".concat(String(justify))], xs !== false && classes[\"grid-xs-\".concat(String(xs))], sm !== false && classes[\"grid-sm-\".concat(String(sm))], md !== false && classes[\"grid-md-\".concat(String(md))], lg !== false && classes[\"grid-lg-\".concat(String(lg))], xl !== false && classes[\"grid-xl-\".concat(String(xl))]);\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: className,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Grid.propTypes = {\n  /**\n   * Defines the `align-content` style property.\n   * It's applied for all screen sizes.\n   */\n  alignContent: PropTypes.oneOf(['stretch', 'center', 'flex-start', 'flex-end', 'space-between', 'space-around']),\n\n  /**\n   * Defines the `align-items` style property.\n   * It's applied for all screen sizes.\n   */\n  alignItems: PropTypes.oneOf(['flex-start', 'center', 'flex-end', 'stretch', 'baseline']),\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType,\n\n  /**\n   * If `true`, the component will have the flex *container* behavior.\n   * You should be wrapping *items* with a *container*.\n   */\n  container: PropTypes.bool,\n\n  /**\n   * Defines the `flex-direction` style property.\n   * It is applied for all screen sizes.\n   */\n  direction: PropTypes.oneOf(['row', 'row-reverse', 'column', 'column-reverse']),\n\n  /**\n   * If `true`, the component will have the flex *item* behavior.\n   * You should be wrapping *items* with a *container*.\n   */\n  item: PropTypes.bool,\n\n  /**\n   * Defines the `justify-content` style property.\n   * It is applied for all screen sizes.\n   */\n  justify: PropTypes.oneOf(['flex-start', 'center', 'flex-end', 'space-between', 'space-around', 'space-evenly']),\n\n  /**\n   * Defines the number of grids the component is going to use.\n   * It's applied for the `lg` breakpoint and wider screens if not overridden.\n   */\n  lg: PropTypes.oneOf([false, 'auto', true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]),\n\n  /**\n   * Defines the number of grids the component is going to use.\n   * It's applied for the `md` breakpoint and wider screens if not overridden.\n   */\n  md: PropTypes.oneOf([false, 'auto', true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]),\n\n  /**\n   * Defines the number of grids the component is going to use.\n   * It's applied for the `sm` breakpoint and wider screens if not overridden.\n   */\n  sm: PropTypes.oneOf([false, 'auto', true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]),\n\n  /**\n   * Defines the space between the type `item` component.\n   * It can only be used on a type `container` component.\n   */\n  spacing: PropTypes.oneOf(SPACINGS),\n\n  /**\n   * Defines the `flex-wrap` style property.\n   * It's applied for all screen sizes.\n   */\n  wrap: PropTypes.oneOf(['nowrap', 'wrap', 'wrap-reverse']),\n\n  /**\n   * Defines the number of grids the component is going to use.\n   * It's applied for the `xl` breakpoint and wider screens.\n   */\n  xl: PropTypes.oneOf([false, 'auto', true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]),\n\n  /**\n   * Defines the number of grids the component is going to use.\n   * It's applied for all the screen sizes with the lowest priority.\n   */\n  xs: PropTypes.oneOf([false, 'auto', true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]),\n\n  /**\n   * If `true`, it sets `min-width: 0` on the item.\n   * Refer to the limitations section of the documentation to better understand the use case.\n   */\n  zeroMinWidth: PropTypes.bool\n} : void 0;\nvar StyledGrid = withStyles(styles, {\n  name: 'MuiGrid'\n})(Grid);\n\nif (process.env.NODE_ENV !== 'production') {\n  var requireProp = requirePropFactory('Grid');\n  StyledGrid.propTypes = _extends({}, StyledGrid.propTypes, {\n    alignContent: requireProp('container'),\n    alignItems: requireProp('container'),\n    direction: requireProp('container'),\n    justify: requireProp('container'),\n    lg: requireProp('item'),\n    md: requireProp('item'),\n    sm: requireProp('item'),\n    spacing: requireProp('container'),\n    wrap: requireProp('container'),\n    xs: requireProp('item'),\n    zeroMinWidth: requireProp('item')\n  });\n}\n\nexport default StyledGrid;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport Paper from '../Paper';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    overflow: 'hidden'\n  }\n};\nvar Card = /*#__PURE__*/React.forwardRef(function Card(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$raised = props.raised,\n      raised = _props$raised === void 0 ? false : _props$raised,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"raised\"]);\n\n  return /*#__PURE__*/React.createElement(Paper, _extends({\n    className: clsx(classes.root, className),\n    elevation: raised ? 8 : 1,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Card.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the card will use raised styling.\n   */\n  raised: PropTypes.bool\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCard'\n})(Card);","import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { useTranslation } from './useTranslation';\nimport { getDisplayName } from './utils';\nexport function withTranslation(ns) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return function Extend(WrappedComponent) {\n    function I18nextWithTranslation(_ref) {\n      var forwardedRef = _ref.forwardedRef,\n          rest = _objectWithoutProperties(_ref, [\"forwardedRef\"]);\n\n      var _useTranslation = useTranslation(ns, rest),\n          _useTranslation2 = _slicedToArray(_useTranslation, 3),\n          t = _useTranslation2[0],\n          i18n = _useTranslation2[1],\n          ready = _useTranslation2[2];\n\n      var passDownProps = _objectSpread(_objectSpread({}, rest), {}, {\n        t: t,\n        i18n: i18n,\n        tReady: ready\n      });\n\n      if (options.withRef && forwardedRef) {\n        passDownProps.ref = forwardedRef;\n      } else if (!options.withRef && forwardedRef) {\n        passDownProps.forwardedRef = forwardedRef;\n      }\n\n      return React.createElement(WrappedComponent, passDownProps);\n    }\n\n    I18nextWithTranslation.displayName = \"withI18nextTranslation(\".concat(getDisplayName(WrappedComponent), \")\");\n    I18nextWithTranslation.WrappedComponent = WrappedComponent;\n\n    var forwardRef = function forwardRef(props, ref) {\n      return React.createElement(I18nextWithTranslation, Object.assign({}, props, {\n        forwardedRef: ref\n      }));\n    };\n\n    return options.withRef ? React.forwardRef(forwardRef) : I18nextWithTranslation;\n  };\n}","var EN_US = ['second', 'minute', 'hour', 'day', 'week', 'month', 'year'];\nexport default function (diff, idx) {\n    if (idx === 0)\n        return ['just now', 'right now'];\n    var unit = EN_US[Math.floor(idx / 2)];\n    if (diff > 1)\n        unit += 's';\n    return [diff + \" \" + unit + \" ago\", \"in \" + diff + \" \" + unit];\n}\n//# sourceMappingURL=en_US.js.map","var ZH_CN = ['秒', '分钟', '小时', '天', '周', '个月', '年'];\nexport default function (diff, idx) {\n    if (idx === 0)\n        return ['刚刚', '片刻后'];\n    var unit = ZH_CN[~~(idx / 2)];\n    return [diff + \" \" + unit + \"\\u524D\", diff + \" \" + unit + \"\\u540E\"];\n}\n//# sourceMappingURL=zh_CN.js.map","/**\n * Created by hustcc on 18/5/20.\n * Contract: i@hust.cc\n */\n/**\n * All supported locales\n */\nvar Locales = {};\n/**\n * register a locale\n * @param locale\n * @param func\n */\nexport var register = function (locale, func) {\n    Locales[locale] = func;\n};\n/**\n * get a locale, default is en_US\n * @param locale\n * @returns {*}\n */\nexport var getLocale = function (locale) {\n    return Locales[locale] || Locales['en_US'];\n};\n//# sourceMappingURL=register.js.map","/**\n * Created by hustcc on 18/5/20.\n * Contract: i@hust.cc\n */\nvar SEC_ARRAY = [\n    60,\n    60,\n    24,\n    7,\n    365 / 7 / 12,\n    12,\n];\n/**\n * format Date / string / timestamp to timestamp\n * @param input\n * @returns {*}\n */\nexport function toDate(input) {\n    if (input instanceof Date)\n        return input;\n    // @ts-ignore\n    if (!isNaN(input) || /^\\d+$/.test(input))\n        return new Date(parseInt(input));\n    input = (input || '')\n        // @ts-ignore\n        .trim()\n        .replace(/\\.\\d+/, '') // remove milliseconds\n        .replace(/-/, '/')\n        .replace(/-/, '/')\n        .replace(/(\\d)T(\\d)/, '$1 $2')\n        .replace(/Z/, ' UTC') // 2017-2-5T3:57:52Z -> 2017-2-5 3:57:52UTC\n        .replace(/([+-]\\d\\d):?(\\d\\d)/, ' $1$2'); // -04:00 -> -0400\n    return new Date(input);\n}\n/**\n * format the diff second to *** time ago, with setting locale\n * @param diff\n * @param localeFunc\n * @returns\n */\nexport function formatDiff(diff, localeFunc) {\n    /**\n     * if locale is not exist, use defaultLocale.\n     * if defaultLocale is not exist, use build-in `en`.\n     * be sure of no error when locale is not exist.\n     *\n     * If `time in`, then 1\n     * If `time ago`, then 0\n     */\n    var agoIn = diff < 0 ? 1 : 0;\n    /**\n     * Get absolute value of number (|diff| is non-negative) value of x\n     * |diff| = diff if diff is positive\n     * |diff| = -diff if diff is negative\n     * |0| = 0\n     */\n    diff = Math.abs(diff);\n    /**\n     * Time in seconds\n     */\n    var totalSec = diff;\n    /**\n     * Unit of time\n     */\n    var idx = 0;\n    for (; diff >= SEC_ARRAY[idx] && idx < SEC_ARRAY.length; idx++) {\n        diff /= SEC_ARRAY[idx];\n    }\n    /**\n     * Math.floor() is alternative of ~~\n     *\n     * The differences and bugs:\n     * Math.floor(3.7) -> 4 but ~~3.7 -> 3\n     * Math.floor(1559125440000.6) -> 1559125440000 but ~~1559125440000.6 -> 52311552\n     *\n     * More information about the performance of algebraic:\n     * https://www.youtube.com/watch?v=65-RbBwZQdU\n     */\n    diff = Math.floor(diff);\n    idx *= 2;\n    if (diff > (idx === 0 ? 9 : 1))\n        idx += 1;\n    return localeFunc(diff, idx, totalSec)[agoIn].replace('%s', diff.toString());\n}\n/**\n * calculate the diff second between date to be formatted an now date.\n * @param date\n * @param relativeDate\n * @returns {number}\n */\nexport function diffSec(date, relativeDate) {\n    var relDate = relativeDate ? toDate(relativeDate) : new Date();\n    return (+relDate - +toDate(date)) / 1000;\n}\n/**\n * nextInterval: calculate the next interval time.\n * - diff: the diff sec between now and date to be formatted.\n *\n * What's the meaning?\n * diff = 61 then return 59\n * diff = 3601 (an hour + 1 second), then return 3599\n * make the interval with high performance.\n **/\nexport function nextInterval(diff) {\n    var rst = 1, i = 0, d = Math.abs(diff);\n    for (; diff >= SEC_ARRAY[i] && i < SEC_ARRAY.length; i++) {\n        diff /= SEC_ARRAY[i];\n        rst *= SEC_ARRAY[i];\n    }\n    d = d % rst;\n    d = d ? rst - d : rst;\n    return Math.ceil(d);\n}\n//# sourceMappingURL=date.js.map","import { formatDiff, diffSec } from './utils/date';\nimport { getLocale } from './register';\n/**\n * format a TDate into string\n * @param date\n * @param locale\n * @param opts\n */\nexport var format = function (date, locale, opts) {\n    // diff seconds\n    var sec = diffSec(date, opts && opts.relativeDate);\n    // format it with locale\n    return formatDiff(sec, getLocale(locale));\n};\n//# sourceMappingURL=format.js.map","/**\n * Created by hustcc on 18/5/20.\n * Contract: i@hust.cc\n */\nimport en_US from './lang/en_US';\nimport zh_CN from './lang/zh_CN';\nimport { register } from './register';\nregister('en_US', en_US);\nregister('zh_CN', zh_CN);\nexport { format } from './format';\nexport { render, cancel } from './realtime';\nexport { register };\n//# sourceMappingURL=index.js.map",";(function (globalObject) {\r\n  'use strict';\r\n\r\n/*\r\n *      bignumber.js v9.0.1\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2020 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\n  var BigNumber,\r\n    isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n    mathceil = Math.ceil,\r\n    mathfloor = Math.floor,\r\n\r\n    bignumberError = '[BigNumber Error] ',\r\n    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n    BASE = 1e14,\r\n    LOG_BASE = 14,\r\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n    SQRT_BASE = 1e7,\r\n\r\n    // EDITABLE\r\n    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n    MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\r\n  function clone(configObject) {\r\n    var div, convertBase, parseNumeric,\r\n      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n      ONE = new BigNumber(1),\r\n\r\n\r\n      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n      // The default values below must be integers within the inclusive ranges stated.\r\n      // The values can also be changed at run-time using BigNumber.set.\r\n\r\n      // The maximum number of decimal places for operations involving division.\r\n      DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n      // The rounding mode used when rounding to the above decimal places, and when using\r\n      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n      // UP         0 Away from zero.\r\n      // DOWN       1 Towards zero.\r\n      // CEIL       2 Towards +Infinity.\r\n      // FLOOR      3 Towards -Infinity.\r\n      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n      // The exponent value at and beneath which toString returns exponential notation.\r\n      // Number type: -7\r\n      TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n      // The exponent value at and above which toString returns exponential notation.\r\n      // Number type: 21\r\n      TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n      // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // Number type: -324  (5e-324)\r\n      MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // Number type:  308  (1.7976931348623157e+308)\r\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n      MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      CRYPTO = false,                          // true or false\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN      1 The remainder has the same sign as the dividend.\r\n      //             This modulo mode is commonly known as 'truncated division' and is\r\n      //             equivalent to (a % n) in JavaScript.\r\n      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n      //             The remainder is always positive.\r\n      //\r\n      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n      // modes are commonly used for the modulus operation.\r\n      // Although the other rounding modes can also be used, they may not give useful results.\r\n      MODULO_MODE = 1,                         // 0 to 9\r\n\r\n      // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n      POW_PRECISION = 0,                    // 0 to MAX\r\n\r\n      // The format specification used by the BigNumber.prototype.toFormat method.\r\n      FORMAT = {\r\n        prefix: '',\r\n        groupSize: 3,\r\n        secondaryGroupSize: 0,\r\n        groupSeparator: ',',\r\n        decimalSeparator: '.',\r\n        fractionGroupSize: 0,\r\n        fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n        suffix: ''\r\n      },\r\n\r\n      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n      // '-', '.', whitespace, or repeated character.\r\n      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';\r\n\r\n\r\n    //------------------------------------------------------------------------------------------\r\n\r\n\r\n    // CONSTRUCTOR\r\n\r\n\r\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * v {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n     */\r\n    function BigNumber(v, b) {\r\n      var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n        x = this;\r\n\r\n      // Enable constructor call without `new`.\r\n      if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n      if (b == null) {\r\n\r\n        if (v && v._isBigNumber === true) {\r\n          x.s = v.s;\r\n\r\n          if (!v.c || v.e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else if (v.e < MIN_EXP) {\r\n            x.c = [x.e = 0];\r\n          } else {\r\n            x.e = v.e;\r\n            x.c = v.c.slice();\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n          // Use `1 / n` to handle minus zero also.\r\n          x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n          // Fast path for integers, where n < 2147483648 (2**31).\r\n          if (v === ~~v) {\r\n            for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n            if (e > MAX_EXP) {\r\n              x.c = x.e = null;\r\n            } else {\r\n              x.e = e;\r\n              x.c = [v];\r\n            }\r\n\r\n            return;\r\n          }\r\n\r\n          str = String(v);\r\n        } else {\r\n\r\n          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n        // Exponential form?\r\n        if ((i = str.search(/e/i)) > 0) {\r\n\r\n          // Determine exponent.\r\n          if (e < 0) e = i;\r\n          e += +str.slice(i + 1);\r\n          str = str.substring(0, i);\r\n        } else if (e < 0) {\r\n\r\n          // Integer.\r\n          e = str.length;\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n        // Allow exponential notation to be used with base 10 argument, while\r\n        // also rounding to DECIMAL_PLACES as with other bases.\r\n        if (b == 10) {\r\n          x = new BigNumber(v);\r\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n        }\r\n\r\n        str = String(v);\r\n\r\n        if (isNum = typeof v == 'number') {\r\n\r\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n            throw Error\r\n             (tooManyDigits + v);\r\n          }\r\n        } else {\r\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        alphabet = ALPHABET.slice(0, b);\r\n        e = i = 0;\r\n\r\n        // Check that str is a valid base b number.\r\n        // Don't use RegExp, so alphabet can contain special characters.\r\n        for (len = str.length; i < len; i++) {\r\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n            if (c == '.') {\r\n\r\n              // If '.' is not the first character and it has not be found before.\r\n              if (i > e) {\r\n                e = len;\r\n                continue;\r\n              }\r\n            } else if (!caseChanged) {\r\n\r\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                  str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n                caseChanged = true;\r\n                i = -1;\r\n                e = 0;\r\n                continue;\r\n              }\r\n            }\r\n\r\n            return parseNumeric(x, String(v), isNum, b);\r\n          }\r\n        }\r\n\r\n        // Prevent later check for length on converted number.\r\n        isNum = false;\r\n        str = convertBase(str, b, 10, x.s);\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n        else e = str.length;\r\n      }\r\n\r\n      // Determine leading zeros.\r\n      for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n      // Determine trailing zeros.\r\n      for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n      if (str = str.slice(i, ++len)) {\r\n        len -= i;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (isNum && BigNumber.DEBUG &&\r\n          len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n            throw Error\r\n             (tooManyDigits + (x.s * v));\r\n        }\r\n\r\n         // Overflow?\r\n        if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n          // Infinity.\r\n          x.c = x.e = null;\r\n\r\n        // Underflow?\r\n        } else if (e < MIN_EXP) {\r\n\r\n          // Zero.\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = e;\r\n          x.c = [];\r\n\r\n          // Transform base\r\n\r\n          // e is the base 10 exponent.\r\n          // i is where to slice str to get the first element of the coefficient array.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n          if (i < len) {\r\n            if (i) x.c.push(+str.slice(0, i));\r\n\r\n            for (len -= LOG_BASE; i < len;) {\r\n              x.c.push(+str.slice(i, i += LOG_BASE));\r\n            }\r\n\r\n            i = LOG_BASE - (str = str.slice(i)).length;\r\n          } else {\r\n            i -= len;\r\n          }\r\n\r\n          for (; i--; str += '0');\r\n          x.c.push(+str);\r\n        }\r\n      } else {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n\r\n    // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n    BigNumber.clone = clone;\r\n\r\n    BigNumber.ROUND_UP = 0;\r\n    BigNumber.ROUND_DOWN = 1;\r\n    BigNumber.ROUND_CEIL = 2;\r\n    BigNumber.ROUND_FLOOR = 3;\r\n    BigNumber.ROUND_HALF_UP = 4;\r\n    BigNumber.ROUND_HALF_DOWN = 5;\r\n    BigNumber.ROUND_HALF_EVEN = 6;\r\n    BigNumber.ROUND_HALF_CEIL = 7;\r\n    BigNumber.ROUND_HALF_FLOOR = 8;\r\n    BigNumber.EUCLID = 9;\r\n\r\n\r\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *     prefix                 {string}\r\n     *     groupSize              {number}\r\n     *     secondaryGroupSize     {number}\r\n     *     groupSeparator         {string}\r\n     *     decimalSeparator       {string}\r\n     *     fractionGroupSize      {number}\r\n     *     fractionGroupSeparator {string}\r\n     *     suffix                 {string}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\r\n    BigNumber.config = BigNumber.set = function (obj) {\r\n      var p, v;\r\n\r\n      if (obj != null) {\r\n\r\n        if (typeof obj == 'object') {\r\n\r\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            DECIMAL_PLACES = v;\r\n          }\r\n\r\n          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 8, p);\r\n            ROUNDING_MODE = v;\r\n          }\r\n\r\n          // EXPONENTIAL_AT {number|number[]}\r\n          // Integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, 0, p);\r\n              intCheck(v[1], 0, MAX, p);\r\n              TO_EXP_NEG = v[0];\r\n              TO_EXP_POS = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n            }\r\n          }\r\n\r\n          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n          if (obj.hasOwnProperty(p = 'RANGE')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, -1, p);\r\n              intCheck(v[1], 1, MAX, p);\r\n              MIN_EXP = v[0];\r\n              MAX_EXP = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              if (v) {\r\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n              } else {\r\n                throw Error\r\n                 (bignumberError + p + ' cannot be zero: ' + v);\r\n              }\r\n            }\r\n          }\r\n\r\n          // CRYPTO {boolean} true or false.\r\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n          // '[BigNumber Error] crypto unavailable'\r\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n            v = obj[p];\r\n            if (v === !!v) {\r\n              if (v) {\r\n                if (typeof crypto != 'undefined' && crypto &&\r\n                 (crypto.getRandomValues || crypto.randomBytes)) {\r\n                  CRYPTO = v;\r\n                } else {\r\n                  CRYPTO = !v;\r\n                  throw Error\r\n                   (bignumberError + 'crypto unavailable');\r\n                }\r\n              } else {\r\n                CRYPTO = v;\r\n              }\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' not true or false: ' + v);\r\n            }\r\n          }\r\n\r\n          // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 9, p);\r\n            MODULO_MODE = v;\r\n          }\r\n\r\n          // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            POW_PRECISION = v;\r\n          }\r\n\r\n          // FORMAT {object}\r\n          // '[BigNumber Error] FORMAT not an object: {v}'\r\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n            v = obj[p];\r\n            if (typeof v == 'object') FORMAT = v;\r\n            else throw Error\r\n             (bignumberError + p + ' not an object: ' + v);\r\n          }\r\n\r\n          // ALPHABET {string}\r\n          // '[BigNumber Error] ALPHABET invalid: {v}'\r\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n            v = obj[p];\r\n\r\n            // Disallow if less than two characters,\r\n            // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n            if (typeof v == 'string' && !/^.?$|[+\\-.\\s]|(.).*\\1/.test(v)) {\r\n              ALPHABET = v;\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' invalid: ' + v);\r\n            }\r\n          }\r\n\r\n        } else {\r\n\r\n          // '[BigNumber Error] Object expected: {v}'\r\n          throw Error\r\n           (bignumberError + 'Object expected: ' + obj);\r\n        }\r\n      }\r\n\r\n      return {\r\n        DECIMAL_PLACES: DECIMAL_PLACES,\r\n        ROUNDING_MODE: ROUNDING_MODE,\r\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n        RANGE: [MIN_EXP, MAX_EXP],\r\n        CRYPTO: CRYPTO,\r\n        MODULO_MODE: MODULO_MODE,\r\n        POW_PRECISION: POW_PRECISION,\r\n        FORMAT: FORMAT,\r\n        ALPHABET: ALPHABET\r\n      };\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n     *\r\n     * v {any}\r\n     *\r\n     * '[BigNumber Error] Invalid BigNumber: {v}'\r\n     */\r\n    BigNumber.isBigNumber = function (v) {\r\n      if (!v || v._isBigNumber !== true) return false;\r\n      if (!BigNumber.DEBUG) return true;\r\n\r\n      var i, n,\r\n        c = v.c,\r\n        e = v.e,\r\n        s = v.s;\r\n\r\n      out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n          // If the first element is zero, the BigNumber value must be zero.\r\n          if (c[0] === 0) {\r\n            if (e === 0 && c.length === 1) return true;\r\n            break out;\r\n          }\r\n\r\n          // Calculate number of digits that c[0] should have, based on the exponent.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (i < 1) i += LOG_BASE;\r\n\r\n          // Calculate number of digits of c[0].\r\n          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n          if (String(c[0]).length == i) {\r\n\r\n            for (i = 0; i < c.length; i++) {\r\n              n = c[i];\r\n              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n            }\r\n\r\n            // Last element cannot be zero, unless it is the only element.\r\n            if (n !== 0) return true;\r\n          }\r\n        }\r\n\r\n      // Infinity/NaN\r\n      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n        return true;\r\n      }\r\n\r\n      throw Error\r\n        (bignumberError + 'Invalid BigNumber: ' + v);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.maximum = BigNumber.max = function () {\r\n      return maxOrMin(arguments, P.lt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.minimum = BigNumber.min = function () {\r\n      return maxOrMin(arguments, P.gt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\r\n    BigNumber.random = (function () {\r\n      var pow2_53 = 0x20000000000000;\r\n\r\n      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n      // Check if Math.random() produces more than 32 bits of randomness.\r\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n       ? function () { return mathfloor(Math.random() * pow2_53); }\r\n       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n         (Math.random() * 0x800000 | 0); };\r\n\r\n      return function (dp) {\r\n        var a, b, e, k, v,\r\n          i = 0,\r\n          c = [],\r\n          rand = new BigNumber(ONE);\r\n\r\n        if (dp == null) dp = DECIMAL_PLACES;\r\n        else intCheck(dp, 0, MAX);\r\n\r\n        k = mathceil(dp / LOG_BASE);\r\n\r\n        if (CRYPTO) {\r\n\r\n          // Browsers supporting crypto.getRandomValues.\r\n          if (crypto.getRandomValues) {\r\n\r\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n            for (; i < k;) {\r\n\r\n              // 53 bits:\r\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n              //                                     11111 11111111 11111111\r\n              // 0x20000 is 2^21.\r\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n              // Rejection sampling:\r\n              // 0 <= v < 9007199254740992\r\n              // Probability that v >= 9e15, is\r\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n              if (v >= 9e15) {\r\n                b = crypto.getRandomValues(new Uint32Array(2));\r\n                a[i] = b[0];\r\n                a[i + 1] = b[1];\r\n              } else {\r\n\r\n                // 0 <= v <= 8999999999999999\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 2;\r\n              }\r\n            }\r\n            i = k / 2;\r\n\r\n          // Node.js supporting crypto.randomBytes.\r\n          } else if (crypto.randomBytes) {\r\n\r\n            // buffer\r\n            a = crypto.randomBytes(k *= 7);\r\n\r\n            for (; i < k;) {\r\n\r\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n              // 0 <= v < 9007199254740992\r\n              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n              if (v >= 9e15) {\r\n                crypto.randomBytes(7).copy(a, i);\r\n              } else {\r\n\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 7;\r\n              }\r\n            }\r\n            i = k / 7;\r\n          } else {\r\n            CRYPTO = false;\r\n            throw Error\r\n             (bignumberError + 'crypto unavailable');\r\n          }\r\n        }\r\n\r\n        // Use Math.random.\r\n        if (!CRYPTO) {\r\n\r\n          for (; i < k;) {\r\n            v = random53bitInt();\r\n            if (v < 9e15) c[i++] = v % 1e14;\r\n          }\r\n        }\r\n\r\n        k = c[--i];\r\n        dp %= LOG_BASE;\r\n\r\n        // Convert trailing digits to zeros according to dp.\r\n        if (k && dp) {\r\n          v = POWS_TEN[LOG_BASE - dp];\r\n          c[i] = mathfloor(k / v) * v;\r\n        }\r\n\r\n        // Remove trailing elements which are zero.\r\n        for (; c[i] === 0; c.pop(), i--);\r\n\r\n        // Zero?\r\n        if (i < 0) {\r\n          c = [e = 0];\r\n        } else {\r\n\r\n          // Remove leading elements which are zero and adjust exponent accordingly.\r\n          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n          // Count the digits of the first element of c to determine leading zeros, and...\r\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n          // adjust the exponent accordingly.\r\n          if (i < LOG_BASE) e -= LOG_BASE - i;\r\n        }\r\n\r\n        rand.e = e;\r\n        rand.c = c;\r\n        return rand;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the sum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.sum = function () {\r\n      var i = 1,\r\n        args = arguments,\r\n        sum = new BigNumber(args[0]);\r\n      for (; i < args.length;) sum = sum.plus(args[i++]);\r\n      return sum;\r\n    };\r\n\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n\r\n    // Called by BigNumber and BigNumber.prototype.toString.\r\n    convertBase = (function () {\r\n      var decimal = '0123456789';\r\n\r\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\r\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n        var j,\r\n          arr = [0],\r\n          arrL,\r\n          i = 0,\r\n          len = str.length;\r\n\r\n        for (; i < len;) {\r\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n          arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n          for (j = 0; j < arr.length; j++) {\r\n\r\n            if (arr[j] > baseOut - 1) {\r\n              if (arr[j + 1] == null) arr[j + 1] = 0;\r\n              arr[j + 1] += arr[j] / baseOut | 0;\r\n              arr[j] %= baseOut;\r\n            }\r\n          }\r\n        }\r\n\r\n        return arr.reverse();\r\n      }\r\n\r\n      // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n      // If the caller is toString, we are converting from base 10 to baseOut.\r\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n        var alphabet, d, e, k, r, x, xc, y,\r\n          i = str.indexOf('.'),\r\n          dp = DECIMAL_PLACES,\r\n          rm = ROUNDING_MODE;\r\n\r\n        // Non-integer.\r\n        if (i >= 0) {\r\n          k = POW_PRECISION;\r\n\r\n          // Unlimited precision.\r\n          POW_PRECISION = 0;\r\n          str = str.replace('.', '');\r\n          y = new BigNumber(baseIn);\r\n          x = y.pow(str.length - i);\r\n          POW_PRECISION = k;\r\n\r\n          // Convert str as if an integer, then restore the fraction part by dividing the\r\n          // result by its base raised to a power.\r\n\r\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n           10, baseOut, decimal);\r\n          y.e = y.c.length;\r\n        }\r\n\r\n        // Convert the number as integer.\r\n\r\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n         ? (alphabet = ALPHABET, decimal)\r\n         : (alphabet = decimal, ALPHABET));\r\n\r\n        // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n        e = k = xc.length;\r\n\r\n        // Remove trailing zeros.\r\n        for (; xc[--k] == 0; xc.pop());\r\n\r\n        // Zero?\r\n        if (!xc[0]) return alphabet.charAt(0);\r\n\r\n        // Does str represent an integer? If so, no need for the division.\r\n        if (i < 0) {\r\n          --e;\r\n        } else {\r\n          x.c = xc;\r\n          x.e = e;\r\n\r\n          // The sign is needed for correct rounding.\r\n          x.s = sign;\r\n          x = div(x, y, dp, rm, baseOut);\r\n          xc = x.c;\r\n          r = x.r;\r\n          e = x.e;\r\n        }\r\n\r\n        // xc now represents str converted to baseOut.\r\n\r\n        // THe index of the rounding digit.\r\n        d = e + dp + 1;\r\n\r\n        // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n        i = xc[d];\r\n\r\n        // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n        k = baseOut / 2;\r\n        r = r || d < 0 || xc[d + 1] != null;\r\n\r\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n               rm == (x.s < 0 ? 8 : 7));\r\n\r\n        // If the index of the rounding digit is not greater than zero, or xc represents\r\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n        // such as 0.00001.\r\n        if (d < 1 || !xc[0]) {\r\n\r\n          // 1^-dp or 0\r\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n        } else {\r\n\r\n          // Truncate xc to the required number of decimal places.\r\n          xc.length = d;\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            // Rounding up may mean the previous digit has to be rounded up and so on.\r\n            for (--baseOut; ++xc[--d] > baseOut;) {\r\n              xc[d] = 0;\r\n\r\n              if (!d) {\r\n                ++e;\r\n                xc = [1].concat(xc);\r\n              }\r\n            }\r\n          }\r\n\r\n          // Determine trailing zeros.\r\n          for (k = xc.length; !xc[--k];);\r\n\r\n          // E.g. [4, 11, 15] becomes 4bf.\r\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n          // Add leading zeros, decimal point and trailing zeros as required.\r\n          str = toFixedPoint(str, e, alphabet.charAt(0));\r\n        }\r\n\r\n        // The caller will add the sign.\r\n        return str;\r\n      };\r\n    })();\r\n\r\n\r\n    // Perform division in the specified base. Called by div and convertBase.\r\n    div = (function () {\r\n\r\n      // Assume non-zero x and k.\r\n      function multiply(x, k, base) {\r\n        var m, temp, xlo, xhi,\r\n          carry = 0,\r\n          i = x.length,\r\n          klo = k % SQRT_BASE,\r\n          khi = k / SQRT_BASE | 0;\r\n\r\n        for (x = x.slice(); i--;) {\r\n          xlo = x[i] % SQRT_BASE;\r\n          xhi = x[i] / SQRT_BASE | 0;\r\n          m = khi * xlo + xhi * klo;\r\n          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n          x[i] = temp % base;\r\n        }\r\n\r\n        if (carry) x = [carry].concat(x);\r\n\r\n        return x;\r\n      }\r\n\r\n      function compare(a, b, aL, bL) {\r\n        var i, cmp;\r\n\r\n        if (aL != bL) {\r\n          cmp = aL > bL ? 1 : -1;\r\n        } else {\r\n\r\n          for (i = cmp = 0; i < aL; i++) {\r\n\r\n            if (a[i] != b[i]) {\r\n              cmp = a[i] > b[i] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        return cmp;\r\n      }\r\n\r\n      function subtract(a, b, aL, base) {\r\n        var i = 0;\r\n\r\n        // Subtract b from a.\r\n        for (; aL--;) {\r\n          a[aL] -= i;\r\n          i = a[aL] < b[aL] ? 1 : 0;\r\n          a[aL] = i * base + a[aL] - b[aL];\r\n        }\r\n\r\n        // Remove leading zeros.\r\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n      }\r\n\r\n      // x: dividend, y: divisor.\r\n      return function (x, y, dp, rm, base) {\r\n        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n          yL, yz,\r\n          s = x.s == y.s ? 1 : -1,\r\n          xc = x.c,\r\n          yc = y.c;\r\n\r\n        // Either NaN, Infinity or 0?\r\n        if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n          return new BigNumber(\r\n\r\n           // Return NaN if either NaN, or both Infinity or 0.\r\n           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n         );\r\n        }\r\n\r\n        q = new BigNumber(s);\r\n        qc = q.c = [];\r\n        e = x.e - y.e;\r\n        s = dp + e + 1;\r\n\r\n        if (!base) {\r\n          base = BASE;\r\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n          s = s / LOG_BASE | 0;\r\n        }\r\n\r\n        // Result exponent may be one less then the current value of e.\r\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n        if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n        if (s < 0) {\r\n          qc.push(1);\r\n          more = true;\r\n        } else {\r\n          xL = xc.length;\r\n          yL = yc.length;\r\n          i = 0;\r\n          s += 2;\r\n\r\n          // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n          n = mathfloor(base / (yc[0] + 1));\r\n\r\n          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n          if (n > 1) {\r\n            yc = multiply(yc, n, base);\r\n            xc = multiply(xc, n, base);\r\n            yL = yc.length;\r\n            xL = xc.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xc.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL; rem[remL++] = 0);\r\n          yz = yc.slice();\r\n          yz = [0].concat(yz);\r\n          yc0 = yc[0];\r\n          if (yc[1] >= base / 2) yc0++;\r\n          // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n          do {\r\n            n = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yc, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, n.\r\n\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // n is how many times the divisor goes into the current remainder.\r\n              n = mathfloor(rem0 / yc0);\r\n\r\n              //  Algorithm:\r\n              //  product = divisor multiplied by trial digit (n).\r\n              //  Compare product and remainder.\r\n              //  If product is greater than remainder:\r\n              //    Subtract divisor from product, decrement trial digit.\r\n              //  Subtract product from remainder.\r\n              //  If product was less than remainder at the last compare:\r\n              //    Compare new remainder and divisor.\r\n              //    If remainder is greater than divisor:\r\n              //      Subtract divisor from remainder, increment trial digit.\r\n\r\n              if (n > 1) {\r\n\r\n                // n may be > base only when base is 3.\r\n                if (n >= base) n = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiply(yc, n, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                // If product > remainder then trial digit n too high.\r\n                // n is 1 too high about 5% of the time, and is not known to have\r\n                // ever been more than 1 too high.\r\n                while (compare(prod, rem, prodL, remL) == 1) {\r\n                  n--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                  prodL = prod.length;\r\n                  cmp = 1;\r\n                }\r\n              } else {\r\n\r\n                // n is 0 or 1, cmp is -1.\r\n                // If n is 0, there is no need to compare yc and rem again below,\r\n                // so change cmp to 1 to avoid it.\r\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                if (n == 0) {\r\n\r\n                  // divisor < remainder, so n must be at least 1.\r\n                  cmp = n = 1;\r\n                }\r\n\r\n                // product = divisor\r\n                prod = yc.slice();\r\n                prodL = prod.length;\r\n              }\r\n\r\n              if (prodL < remL) prod = [0].concat(prod);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n              remL = rem.length;\r\n\r\n               // If product was < remainder.\r\n              if (cmp == -1) {\r\n\r\n                // Compare divisor and new remainder.\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                // Trial digit n too low.\r\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                while (compare(yc, rem, yL, remL) < 1) {\r\n                  n++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                  remL = rem.length;\r\n                }\r\n              }\r\n            } else if (cmp === 0) {\r\n              n++;\r\n              rem = [0];\r\n            } // else cmp === 1 and n will be 0\r\n\r\n            // Add the next digit, n, to the result array.\r\n            qc[i++] = n;\r\n\r\n            // Update the remainder.\r\n            if (rem[0]) {\r\n              rem[remL++] = xc[xi] || 0;\r\n            } else {\r\n              rem = [xc[xi]];\r\n              remL = 1;\r\n            }\r\n          } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n          more = rem[0] != null;\r\n\r\n          // Leading zero?\r\n          if (!qc[0]) qc.splice(0, 1);\r\n        }\r\n\r\n        if (base == BASE) {\r\n\r\n          // To calculate q.e, first get the number of digits of qc[0].\r\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n        // Caller is convertBase.\r\n        } else {\r\n          q.e = e;\r\n          q.r = +more;\r\n        }\r\n\r\n        return q;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\r\n    function format(n, i, rm, id) {\r\n      var c0, e, ne, len, str;\r\n\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      if (!n.c) return n.toString();\r\n\r\n      c0 = n.c[0];\r\n      ne = n.e;\r\n\r\n      if (i == null) {\r\n        str = coeffToString(n.c);\r\n        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n         ? toExponential(str, ne)\r\n         : toFixedPoint(str, ne, '0');\r\n      } else {\r\n        n = round(new BigNumber(n), i, rm);\r\n\r\n        // n.e may have changed if the value was rounded up.\r\n        e = n.e;\r\n\r\n        str = coeffToString(n.c);\r\n        len = str.length;\r\n\r\n        // toPrecision returns exponential notation if the number of significant digits\r\n        // specified is less than the number of digits necessary to represent the integer\r\n        // part of the value in fixed-point notation.\r\n\r\n        // Exponential notation.\r\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n          // Append zeros?\r\n          for (; len < i; str += '0', len++);\r\n          str = toExponential(str, e);\r\n\r\n        // Fixed-point notation.\r\n        } else {\r\n          i -= ne;\r\n          str = toFixedPoint(str, e, '0');\r\n\r\n          // Append zeros?\r\n          if (e + 1 > len) {\r\n            if (--i > 0) for (str += '.'; i--; str += '0');\r\n          } else {\r\n            i += e - len;\r\n            if (i > 0) {\r\n              if (e + 1 == len) str += '.';\r\n              for (; i--; str += '0');\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return n.s < 0 && c0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // Handle BigNumber.max and BigNumber.min.\r\n    function maxOrMin(args, method) {\r\n      var n,\r\n        i = 1,\r\n        m = new BigNumber(args[0]);\r\n\r\n      for (; i < args.length; i++) {\r\n        n = new BigNumber(args[i]);\r\n\r\n        // If any number is NaN, return NaN.\r\n        if (!n.s) {\r\n          m = n;\r\n          break;\r\n        } else if (method.call(m, n)) {\r\n          m = n;\r\n        }\r\n      }\r\n\r\n      return m;\r\n    }\r\n\r\n\r\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\r\n    function normalise(n, c, e) {\r\n      var i = 1,\r\n        j = c.length;\r\n\r\n       // Remove trailing zeros.\r\n      for (; !c[--j]; c.pop());\r\n\r\n      // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n      for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n      // Overflow?\r\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        n.c = n.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        n.c = [n.e = 0];\r\n      } else {\r\n        n.e = e;\r\n        n.c = c;\r\n      }\r\n\r\n      return n;\r\n    }\r\n\r\n\r\n    // Handle values that fail the validity test in BigNumber.\r\n    parseNumeric = (function () {\r\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n        dotAfter = /^([^.]+)\\.$/,\r\n        dotBefore = /^\\.([^.]+)$/,\r\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n      return function (x, str, isNum, b) {\r\n        var base,\r\n          s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n        // No exception on ±Infinity or NaN.\r\n        if (isInfinityOrNaN.test(s)) {\r\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n        } else {\r\n          if (!isNum) {\r\n\r\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n            s = s.replace(basePrefix, function (m, p1, p2) {\r\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n              return !b || b == base ? p1 : m;\r\n            });\r\n\r\n            if (b) {\r\n              base = b;\r\n\r\n              // E.g. '1.' to '1', '.1' to '0.1'\r\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n            }\r\n\r\n            if (str != s) return new BigNumber(s, base);\r\n          }\r\n\r\n          // '[BigNumber Error] Not a number: {n}'\r\n          // '[BigNumber Error] Not a base {b} number: {n}'\r\n          if (BigNumber.DEBUG) {\r\n            throw Error\r\n              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n          }\r\n\r\n          // NaN\r\n          x.s = null;\r\n        }\r\n\r\n        x.c = x.e = null;\r\n      }\r\n    })();\r\n\r\n\r\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\r\n    function round(x, sd, rm, r) {\r\n      var d, i, j, k, n, ni, rd,\r\n        xc = x.c,\r\n        pows10 = POWS_TEN;\r\n\r\n      // if x is not Infinity or NaN...\r\n      if (xc) {\r\n\r\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n        // ni is the index of n within x.c.\r\n        // d is the number of digits of n.\r\n        // i is the index of rd within n including leading zeros.\r\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n        out: {\r\n\r\n          // Get the number of digits of the first element of xc.\r\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n          i = sd - d;\r\n\r\n          // If the rounding digit is in the first element of xc...\r\n          if (i < 0) {\r\n            i += LOG_BASE;\r\n            j = sd;\r\n            n = xc[ni = 0];\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = n / pows10[d - j - 1] % 10 | 0;\r\n          } else {\r\n            ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n            if (ni >= xc.length) {\r\n\r\n              if (r) {\r\n\r\n                // Needed by sqrt.\r\n                for (; xc.length <= ni; xc.push(0));\r\n                n = rd = 0;\r\n                d = 1;\r\n                i %= LOG_BASE;\r\n                j = i - LOG_BASE + 1;\r\n              } else {\r\n                break out;\r\n              }\r\n            } else {\r\n              n = k = xc[ni];\r\n\r\n              // Get the number of digits of n.\r\n              for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n              // Get the index of rd within n.\r\n              i %= LOG_BASE;\r\n\r\n              // Get the index of rd within n, adjusted for leading zeros.\r\n              // The number of leading zeros of n is given by LOG_BASE - d.\r\n              j = i - LOG_BASE + d;\r\n\r\n              // Get the rounding digit at index j of n.\r\n              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\r\n            }\r\n          }\r\n\r\n          r = r || sd < 0 ||\r\n\r\n          // Are there any non-zero digits after the rounding digit?\r\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n          r = rm < 4\r\n           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n            // Check whether the digit to the left of the rounding digit is odd.\r\n            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n          if (sd < 1 || !xc[0]) {\r\n            xc.length = 0;\r\n\r\n            if (r) {\r\n\r\n              // Convert sd to decimal places.\r\n              sd -= x.e + 1;\r\n\r\n              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n              x.e = -sd || 0;\r\n            } else {\r\n\r\n              // Zero.\r\n              xc[0] = x.e = 0;\r\n            }\r\n\r\n            return x;\r\n          }\r\n\r\n          // Remove excess digits.\r\n          if (i == 0) {\r\n            xc.length = ni;\r\n            k = 1;\r\n            ni--;\r\n          } else {\r\n            xc.length = ni + 1;\r\n            k = pows10[LOG_BASE - i];\r\n\r\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n            // j > 0 means i > number of leading zeros of n.\r\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n          }\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            for (; ;) {\r\n\r\n              // If the digit to be rounded up is in the first element of xc...\r\n              if (ni == 0) {\r\n\r\n                // i will be the length of xc[0] before k is added.\r\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n                j = xc[0] += k;\r\n                for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n                // if i != k the length has increased.\r\n                if (i != k) {\r\n                  x.e++;\r\n                  if (xc[0] == BASE) xc[0] = 1;\r\n                }\r\n\r\n                break;\r\n              } else {\r\n                xc[ni] += k;\r\n                if (xc[ni] != BASE) break;\r\n                xc[ni--] = 0;\r\n                k = 1;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Remove trailing zeros.\r\n          for (i = xc.length; xc[--i] === 0; xc.pop());\r\n        }\r\n\r\n        // Overflow? Infinity.\r\n        if (x.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n\r\n        // Underflow? Zero.\r\n        } else if (x.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    function valueOf(n) {\r\n      var str,\r\n        e = n.e;\r\n\r\n      if (e === null) return n.toString();\r\n\r\n      str = coeffToString(n.c);\r\n\r\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n        ? toExponential(str, e)\r\n        : toFixedPoint(str, e, '0');\r\n\r\n      return n.s < 0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\r\n    P.absoluteValue = P.abs = function () {\r\n      var x = new BigNumber(this);\r\n      if (x.s < 0) x.s = 1;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\r\n    P.comparedTo = function (y, b) {\r\n      return compare(this, new BigNumber(y, b));\r\n    };\r\n\r\n\r\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.decimalPlaces = P.dp = function (dp, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), dp + x.e + 1, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last number.\r\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n      if (n < 0) n = 0;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.dividedBy = P.div = function (y, b) {\r\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\r\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n      return div(this, new BigNumber(y, b), 0, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\r\n    P.exponentiatedBy = P.pow = function (n, m) {\r\n      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n        x = this;\r\n\r\n      n = new BigNumber(n);\r\n\r\n      // Allow NaN and ±Infinity, but not other non-integers.\r\n      if (n.c && !n.isInteger()) {\r\n        throw Error\r\n          (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n      }\r\n\r\n      if (m != null) m = new BigNumber(m);\r\n\r\n      // Exponent of MAX_SAFE_INTEGER is 15.\r\n      nIsBig = n.e > 14;\r\n\r\n      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n        // The sign of the result of pow when x is negative depends on the evenness of n.\r\n        // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));\r\n        return m ? y.mod(m) : y;\r\n      }\r\n\r\n      nIsNeg = n.s < 0;\r\n\r\n      if (m) {\r\n\r\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n        if (isModExp) x = x.mod(m);\r\n\r\n      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n        // [1, 240000000]\r\n        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n        // [80000000000000]  [99999750000000]\r\n        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n        // If x is negative and n is odd, k = -0, else k = 0.\r\n        k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n        // If x >= 1, k = ±Infinity.\r\n        if (x.e > -1) k = 1 / k;\r\n\r\n        // If n is negative return ±0, else return ±Infinity.\r\n        return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n      } else if (POW_PRECISION) {\r\n\r\n        // Truncating each coefficient array to a length of k after each multiplication\r\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n        // i.e. there will be a minimum of 28 guard digits retained.\r\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n      }\r\n\r\n      if (nIsBig) {\r\n        half = new BigNumber(0.5);\r\n        if (nIsNeg) n.s = 1;\r\n        nIsOdd = isOdd(n);\r\n      } else {\r\n        i = Math.abs(+valueOf(n));\r\n        nIsOdd = i % 2;\r\n      }\r\n\r\n      y = new BigNumber(ONE);\r\n\r\n      // Performs 54 loop iterations for n of 9007199254740991.\r\n      for (; ;) {\r\n\r\n        if (nIsOdd) {\r\n          y = y.times(x);\r\n          if (!y.c) break;\r\n\r\n          if (k) {\r\n            if (y.c.length > k) y.c.length = k;\r\n          } else if (isModExp) {\r\n            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n          }\r\n        }\r\n\r\n        if (i) {\r\n          i = mathfloor(i / 2);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        } else {\r\n          n = n.times(half);\r\n          round(n, n.e + 1, 1);\r\n\r\n          if (n.e > 14) {\r\n            nIsOdd = isOdd(n);\r\n          } else {\r\n            i = +valueOf(n);\r\n            if (i === 0) break;\r\n            nIsOdd = i % 2;\r\n          }\r\n        }\r\n\r\n        x = x.times(x);\r\n\r\n        if (k) {\r\n          if (x.c && x.c.length > k) x.c.length = k;\r\n        } else if (isModExp) {\r\n          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (isModExp) return y;\r\n      if (nIsNeg) y = ONE.div(y);\r\n\r\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\r\n    P.integerValue = function (rm) {\r\n      var n = new BigNumber(this);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n      return round(n, n.e + 1, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isEqualTo = P.eq = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\r\n    P.isFinite = function () {\r\n      return !!this.c;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isGreaterThan = P.gt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\r\n    P.isInteger = function () {\r\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isLessThan = P.lt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\r\n    P.isNaN = function () {\r\n      return !this.s;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\r\n    P.isNegative = function () {\r\n      return this.s < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\r\n    P.isPositive = function () {\r\n      return this.s > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\r\n    P.isZero = function () {\r\n      return !!this.c && this.c[0] == 0;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.minus = function (y, b) {\r\n      var i, j, t, xLTy,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n      if (a != b) {\r\n        y.s = -b;\r\n        return x.plus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Either Infinity?\r\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n\r\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n           ROUNDING_MODE == 3 ? -0 : 0);\r\n        }\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Determine which is the bigger number.\r\n      if (a = xe - ye) {\r\n\r\n        if (xLTy = a < 0) {\r\n          a = -a;\r\n          t = xc;\r\n        } else {\r\n          ye = xe;\r\n          t = yc;\r\n        }\r\n\r\n        t.reverse();\r\n\r\n        // Prepend zeros to equalise exponents.\r\n        for (b = a; b--; t.push(0));\r\n        t.reverse();\r\n      } else {\r\n\r\n        // Exponents equal. Check digit by digit.\r\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n        for (a = b = 0; b < j; b++) {\r\n\r\n          if (xc[b] != yc[b]) {\r\n            xLTy = xc[b] < yc[b];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // x < y? Point xc to the array of the bigger number.\r\n      if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n      b = (j = yc.length) - (i = xc.length);\r\n\r\n      // Append zeros to xc if shorter.\r\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n      if (b > 0) for (; b--; xc[i++] = 0);\r\n      b = BASE - 1;\r\n\r\n      // Subtract yc from xc.\r\n      for (; j > a;) {\r\n\r\n        if (xc[--j] < yc[j]) {\r\n          for (i = j; i && !xc[--i]; xc[i] = b);\r\n          --xc[i];\r\n          xc[j] += BASE;\r\n        }\r\n\r\n        xc[j] -= yc[j];\r\n      }\r\n\r\n      // Remove leading zeros and adjust exponent accordingly.\r\n      for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n      // Zero?\r\n      if (!xc[0]) {\r\n\r\n        // Following IEEE 754 (2008) 6.3,\r\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n        y.c = [y.e = 0];\r\n        return y;\r\n      }\r\n\r\n      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n      // for finite x and y.\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\r\n    P.modulo = P.mod = function (y, b) {\r\n      var q, s,\r\n        x = this;\r\n\r\n      y = new BigNumber(y, b);\r\n\r\n      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n      if (!x.c || !y.s || y.c && !y.c[0]) {\r\n        return new BigNumber(NaN);\r\n\r\n      // Return x if y is Infinity or x is zero.\r\n      } else if (!y.c || x.c && !x.c[0]) {\r\n        return new BigNumber(x);\r\n      }\r\n\r\n      if (MODULO_MODE == 9) {\r\n\r\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n        // r = x - qy    where  0 <= r < abs(y)\r\n        s = y.s;\r\n        y.s = 1;\r\n        q = div(x, y, 0, 3);\r\n        y.s = s;\r\n        q.s *= s;\r\n      } else {\r\n        q = div(x, y, 0, MODULO_MODE);\r\n      }\r\n\r\n      y = x.minus(q.times(y));\r\n\r\n      // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n      return y;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\r\n    P.multipliedBy = P.times = function (y, b) {\r\n      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n        base, sqrtBase,\r\n        x = this,\r\n        xc = x.c,\r\n        yc = (y = new BigNumber(y, b)).c;\r\n\r\n      // Either NaN, ±Infinity or ±0?\r\n      if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n          y.c = y.e = y.s = null;\r\n        } else {\r\n          y.s *= x.s;\r\n\r\n          // Return ±Infinity if either is ±Infinity.\r\n          if (!xc || !yc) {\r\n            y.c = y.e = null;\r\n\r\n          // Return ±0 if either is ±0.\r\n          } else {\r\n            y.c = [0];\r\n            y.e = 0;\r\n          }\r\n        }\r\n\r\n        return y;\r\n      }\r\n\r\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n      y.s *= x.s;\r\n      xcL = xc.length;\r\n      ycL = yc.length;\r\n\r\n      // Ensure xc points to longer array and xcL to its length.\r\n      if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n      // Initialise the result array with zeros.\r\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n      base = BASE;\r\n      sqrtBase = SQRT_BASE;\r\n\r\n      for (i = ycL; --i >= 0;) {\r\n        c = 0;\r\n        ylo = yc[i] % sqrtBase;\r\n        yhi = yc[i] / sqrtBase | 0;\r\n\r\n        for (k = xcL, j = i + k; j > i;) {\r\n          xlo = xc[--k] % sqrtBase;\r\n          xhi = xc[k] / sqrtBase | 0;\r\n          m = yhi * xlo + xhi * ylo;\r\n          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n          zc[j--] = xlo % base;\r\n        }\r\n\r\n        zc[j] = c;\r\n      }\r\n\r\n      if (c) {\r\n        ++e;\r\n      } else {\r\n        zc.splice(0, 1);\r\n      }\r\n\r\n      return normalise(y, zc, e);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\r\n    P.negated = function () {\r\n      var x = new BigNumber(this);\r\n      x.s = -x.s || null;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.plus = function (y, b) {\r\n      var t,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n       if (a != b) {\r\n        y.s = -b;\r\n        return x.minus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Return ±Infinity if either ±Infinity.\r\n        if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n        // Either zero?\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n      if (a = xe - ye) {\r\n        if (a > 0) {\r\n          ye = xe;\r\n          t = yc;\r\n        } else {\r\n          a = -a;\r\n          t = xc;\r\n        }\r\n\r\n        t.reverse();\r\n        for (; a--; t.push(0));\r\n        t.reverse();\r\n      }\r\n\r\n      a = xc.length;\r\n      b = yc.length;\r\n\r\n      // Point xc to the longer array, and b to the shorter length.\r\n      if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\r\n\r\n      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n      for (a = 0; b;) {\r\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n      }\r\n\r\n      if (a) {\r\n        xc = [a].concat(xc);\r\n        ++ye;\r\n      }\r\n\r\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n      // ye = MAX_EXP + 1 possible\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.precision = P.sd = function (sd, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (sd != null && sd !== !!sd) {\r\n        intCheck(sd, 1, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), sd, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      v = c.length - 1;\r\n      n = v * LOG_BASE + 1;\r\n\r\n      if (v = c[v]) {\r\n\r\n        // Subtract the number of trailing zeros of the last element.\r\n        for (; v % 10 == 0; v /= 10, n--);\r\n\r\n        // Add the number of digits of the first element.\r\n        for (v = c[0]; v >= 10; v /= 10, n++);\r\n      }\r\n\r\n      if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\r\n    P.shiftedBy = function (k) {\r\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n      return this.times('1e' + k);\r\n    };\r\n\r\n\r\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.squareRoot = P.sqrt = function () {\r\n      var m, n, r, rep, t,\r\n        x = this,\r\n        c = x.c,\r\n        s = x.s,\r\n        e = x.e,\r\n        dp = DECIMAL_PLACES + 4,\r\n        half = new BigNumber('0.5');\r\n\r\n      // Negative/NaN/Infinity/zero?\r\n      if (s !== 1 || !c || !c[0]) {\r\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n      }\r\n\r\n      // Initial estimate.\r\n      s = Math.sqrt(+valueOf(x));\r\n\r\n      // Math.sqrt underflow/overflow?\r\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n      if (s == 0 || s == 1 / 0) {\r\n        n = coeffToString(c);\r\n        if ((n.length + e) % 2 == 0) n += '0';\r\n        s = Math.sqrt(+n);\r\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n        if (s == 1 / 0) {\r\n          n = '5e' + e;\r\n        } else {\r\n          n = s.toExponential();\r\n          n = n.slice(0, n.indexOf('e') + 1) + e;\r\n        }\r\n\r\n        r = new BigNumber(n);\r\n      } else {\r\n        r = new BigNumber(s + '');\r\n      }\r\n\r\n      // Check for zero.\r\n      // r could be zero if MIN_EXP is changed after the this value was created.\r\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n      // coeffToString to throw.\r\n      if (r.c[0]) {\r\n        e = r.e;\r\n        s = e + dp;\r\n        if (s < 3) s = 0;\r\n\r\n        // Newton-Raphson iteration.\r\n        for (; ;) {\r\n          t = r;\r\n          r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n            // The exponent of r may here be one less than the final result exponent,\r\n            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n            // are indexed correctly.\r\n            if (r.e < e) --s;\r\n            n = n.slice(s - 3, s + 1);\r\n\r\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n            // iteration.\r\n            if (n == '9999' || !rep && n == '4999') {\r\n\r\n              // On the first iteration only, check to see if rounding up gives the\r\n              // exact result as the nines may infinitely repeat.\r\n              if (!rep) {\r\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n                if (t.times(t).eq(x)) {\r\n                  r = t;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              dp += 4;\r\n              s += 4;\r\n              rep = 1;\r\n            } else {\r\n\r\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n              // result. If not, then there are further digits and m will be truthy.\r\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n                // Truncate to the first rounding digit.\r\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n                m = !r.times(r).eq(x);\r\n              }\r\n\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toExponential = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp++;\r\n      }\r\n      return format(this, dp, rm, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toFixed = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp = dp + this.e + 1;\r\n      }\r\n      return format(this, dp, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the format or FORMAT object (see BigNumber.set).\r\n     *\r\n     * The formatting object may contain some or all of the properties shown below.\r\n     *\r\n     * FORMAT = {\r\n     *   prefix: '',\r\n     *   groupSize: 3,\r\n     *   secondaryGroupSize: 0,\r\n     *   groupSeparator: ',',\r\n     *   decimalSeparator: '.',\r\n     *   fractionGroupSize: 0,\r\n     *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n     *   suffix: ''\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     * [format] {object} Formatting options. See FORMAT pbject above.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     * '[BigNumber Error] Argument not an object: {format}'\r\n     */\r\n    P.toFormat = function (dp, rm, format) {\r\n      var str,\r\n        x = this;\r\n\r\n      if (format == null) {\r\n        if (dp != null && rm && typeof rm == 'object') {\r\n          format = rm;\r\n          rm = null;\r\n        } else if (dp && typeof dp == 'object') {\r\n          format = dp;\r\n          dp = rm = null;\r\n        } else {\r\n          format = FORMAT;\r\n        }\r\n      } else if (typeof format != 'object') {\r\n        throw Error\r\n          (bignumberError + 'Argument not an object: ' + format);\r\n      }\r\n\r\n      str = x.toFixed(dp, rm);\r\n\r\n      if (x.c) {\r\n        var i,\r\n          arr = str.split('.'),\r\n          g1 = +format.groupSize,\r\n          g2 = +format.secondaryGroupSize,\r\n          groupSeparator = format.groupSeparator || '',\r\n          intPart = arr[0],\r\n          fractionPart = arr[1],\r\n          isNeg = x.s < 0,\r\n          intDigits = isNeg ? intPart.slice(1) : intPart,\r\n          len = intDigits.length;\r\n\r\n        if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n        if (g1 > 0 && len > 0) {\r\n          i = len % g1 || g1;\r\n          intPart = intDigits.substr(0, i);\r\n          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n          if (isNeg) intPart = '-' + intPart;\r\n        }\r\n\r\n        str = fractionPart\r\n         ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n          ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n           '$&' + (format.fractionGroupSeparator || ''))\r\n          : fractionPart)\r\n         : intPart;\r\n      }\r\n\r\n      return (format.prefix || '') + str + (format.suffix || '');\r\n    };\r\n\r\n\r\n    /*\r\n     * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n     * fraction with an integer numerator and an integer denominator.\r\n     * The denominator will be a positive non-zero value less than or equal to the specified\r\n     * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n     * the lowest value necessary to represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\r\n    P.toFraction = function (md) {\r\n      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n        x = this,\r\n        xc = x.c;\r\n\r\n      if (md != null) {\r\n        n = new BigNumber(md);\r\n\r\n        // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n          throw Error\r\n            (bignumberError + 'Argument ' +\r\n              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n        }\r\n      }\r\n\r\n      if (!xc) return new BigNumber(x);\r\n\r\n      d = new BigNumber(ONE);\r\n      n1 = d0 = new BigNumber(ONE);\r\n      d1 = n0 = new BigNumber(ONE);\r\n      s = coeffToString(xc);\r\n\r\n      // Determine initial denominator.\r\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n      e = d.e = s.length - x.e - 1;\r\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n      exp = MAX_EXP;\r\n      MAX_EXP = 1 / 0;\r\n      n = new BigNumber(s);\r\n\r\n      // n0 = d1 = 0\r\n      n0.c[0] = 0;\r\n\r\n      for (; ;)  {\r\n        q = div(n, d, 0, 1);\r\n        d2 = d0.plus(q.times(d1));\r\n        if (d2.comparedTo(md) == 1) break;\r\n        d0 = d1;\r\n        d1 = d2;\r\n        n1 = n0.plus(q.times(d2 = n1));\r\n        n0 = d2;\r\n        d = n.minus(q.times(d2 = d));\r\n        n = d2;\r\n      }\r\n\r\n      d2 = div(md.minus(d0), d1, 0, 1);\r\n      n0 = n0.plus(d2.times(n1));\r\n      d0 = d0.plus(d2.times(d1));\r\n      n0.s = n1.s = x.s;\r\n      e = e * 2;\r\n\r\n      // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n      MAX_EXP = exp;\r\n\r\n      return r;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\r\n    P.toNumber = function () {\r\n      return +valueOf(this);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.toPrecision = function (sd, rm) {\r\n      if (sd != null) intCheck(sd, 1, MAX);\r\n      return format(this, sd, rm, 2);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\r\n    P.toString = function (b) {\r\n      var str,\r\n        n = this,\r\n        s = n.s,\r\n        e = n.e;\r\n\r\n      // Infinity or NaN?\r\n      if (e === null) {\r\n        if (s) {\r\n          str = 'Infinity';\r\n          if (s < 0) str = '-' + str;\r\n        } else {\r\n          str = 'NaN';\r\n        }\r\n      } else {\r\n        if (b == null) {\r\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n           ? toExponential(coeffToString(n.c), e)\r\n           : toFixedPoint(coeffToString(n.c), e, '0');\r\n        } else if (b === 10) {\r\n          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n          str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n        } else {\r\n          intCheck(b, 2, ALPHABET.length, 'Base');\r\n          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n        }\r\n\r\n        if (s < 0 && n.c[0]) str = '-' + str;\r\n      }\r\n\r\n      return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\r\n    P.valueOf = P.toJSON = function () {\r\n      return valueOf(this);\r\n    };\r\n\r\n\r\n    P._isBigNumber = true;\r\n\r\n    if (configObject != null) BigNumber.set(configObject);\r\n\r\n    return BigNumber;\r\n  }\r\n\r\n\r\n  // PRIVATE HELPER FUNCTIONS\r\n\r\n  // These functions don't need access to variables,\r\n  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\n  function bitFloor(n) {\r\n    var i = n | 0;\r\n    return n > 0 || n === i ? i : i - 1;\r\n  }\r\n\r\n\r\n  // Return a coefficient array as a string of base 10 digits.\r\n  function coeffToString(a) {\r\n    var s, z,\r\n      i = 1,\r\n      j = a.length,\r\n      r = a[0] + '';\r\n\r\n    for (; i < j;) {\r\n      s = a[i++] + '';\r\n      z = LOG_BASE - s.length;\r\n      for (; z--; s = '0' + s);\r\n      r += s;\r\n    }\r\n\r\n    // Determine trailing zeros.\r\n    for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n    return r.slice(0, j + 1 || 1);\r\n  }\r\n\r\n\r\n  // Compare the value of BigNumbers x and y.\r\n  function compare(x, y) {\r\n    var a, b,\r\n      xc = x.c,\r\n      yc = y.c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either NaN?\r\n    if (!i || !j) return null;\r\n\r\n    a = xc && !xc[0];\r\n    b = yc && !yc[0];\r\n\r\n    // Either zero?\r\n    if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    a = i < 0;\r\n    b = k == l;\r\n\r\n    // Either Infinity?\r\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n    // Compare exponents.\r\n    if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\r\n  function intCheck(n, min, max, name) {\r\n    if (n < min || n > max || n !== mathfloor(n)) {\r\n      throw Error\r\n       (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n         ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n         : ' not a primitive number: ') + String(n));\r\n    }\r\n  }\r\n\r\n\r\n  // Assumes finite n.\r\n  function isOdd(n) {\r\n    var k = n.c.length - 1;\r\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n  }\r\n\r\n\r\n  function toExponential(str, e) {\r\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n     (e < 0 ? 'e' : 'e+') + e;\r\n  }\r\n\r\n\r\n  function toFixedPoint(str, e, z) {\r\n    var len, zs;\r\n\r\n    // Negative exponent?\r\n    if (e < 0) {\r\n\r\n      // Prepend zeros.\r\n      for (zs = z + '.'; ++e; zs += z);\r\n      str = zs + str;\r\n\r\n    // Positive exponent\r\n    } else {\r\n      len = str.length;\r\n\r\n      // Append zeros.\r\n      if (++e > len) {\r\n        for (zs = z, e -= len; --e; zs += z);\r\n        str += zs;\r\n      } else if (e < len) {\r\n        str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // EXPORT\r\n\r\n\r\n  BigNumber = clone();\r\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () { return BigNumber; });\r\n\r\n  // Node.js and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = BigNumber;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalObject) {\r\n      globalObject = typeof self != 'undefined' && self ? self : window;\r\n    }\r\n\r\n    globalObject.BigNumber = BigNumber;\r\n  }\r\n})(this);\r\n"],"sourceRoot":""}